@using AudioLibrary.Device
@using AudioLibrary.Errors
@using AudioLibrary.SoundPlayer
@using AudioLibrary.Wave

<InputFile OnChange="LoadFilesAsync" accept=".wav, .wave">Load a wave file</InputFile>
<br/>
<button @onclick="Play">Play</button>
<button @onclick="Pause">Pause</button>
<button @onclick="Stop">Stop</button>

@code
{
    private ISoundPlayer _soundPlayer = null!;
    private WaveFile? _currentFile;

    protected override void OnInitialized()
    {
        var alcAudioErrorsManagerFactory = new AlcAudioErrorsManagerFactory();
        var oadFinder = new OutputAudioDevicesFinder(alcAudioErrorsManagerFactory);
        var cadFinder = new CaptureDevicesFinder(alcAudioErrorsManagerFactory);
        var aadFinder = new AllAudioDevicesFinder(alcAudioErrorsManagerFactory);
        var oad = oadFinder.GetAll();
        var cad = cadFinder.GetAll();
        var aad = aadFinder.GetAll();

        var audioDevice = new DefaultAudioDevice(alcAudioErrorsManagerFactory);
        _soundPlayer = new SoundPlayer(audioDevice, new AlAudioErrorsManager());
    }

    private void Play()
    {
        _soundPlayer.Play();
    }

    private void Pause()
    {
        _soundPlayer.Pause();
    }

    private void Stop()
    {
        _soundPlayer.Stop();
    }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        if (_currentFile is not null)
        {
            _soundPlayer.Close();
            await _currentFile.DisposeAsync();
            _currentFile = null;
        }

        var stream = await GetFileStreamASync(e);
        _currentFile = new WaveFile(stream);
        _soundPlayer.Open(_currentFile);
    }

    private static async Task<MemoryStream> GetFileStreamASync(InputFileChangeEventArgs e)
    {
        const int maxAllowedSize = 1024 * 1024 * 100;
        var stream = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize).CopyToAsync(stream);
        stream.Position = 0;
        return stream;
    }
}
